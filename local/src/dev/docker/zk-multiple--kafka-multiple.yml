version: '2.1'

networks:
  docker_default:
    driver: bridge


services:
  zoo1:
    image: confluentinc/cp-zookeeper:7.3.2
    hostname: zoo1
    container_name: zoo1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zoo1:2888:3888;zoo2:2888:3888;zoo3:2888:3888
    networks:
      - docker_default

  zoo2:
    image: confluentinc/cp-zookeeper:7.3.2
    hostname: zoo2
    container_name: zoo2
    ports:
      - "2182:2182"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2182
      ZOOKEEPER_SERVER_ID: 2
      ZOOKEEPER_SERVERS: zoo1:2888:3888;zoo2:2888:3888;zoo3:2888:3888
    networks:
      - docker_default
  
  zoo3:
    image: confluentinc/cp-zookeeper:7.3.2
    hostname: zoo3
    container_name: zoo3
    ports:
      - "2183:2183"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2183
      ZOOKEEPER_SERVER_ID: 3
      ZOOKEEPER_SERVERS: zoo1:2888:3888;zoo2:2888:3888;zoo3:2888:3888
    networks:
        - docker_default

  kafka1:
    image: confluentinc/cp-kafka:7.3.2
    hostname: kafka1
    container_name: kafka1
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181,zoo2:2182,zoo3:2183"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
      KAFKA_CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: "kafka1:19092,kafka2:19093,kafka3:19094"
      KAFKA_CONFLUENT_METRICS_REPORTER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TOPIC__CONFLUENT_COMMAND__MIN_INSYNC_REPLICAS: 1
      KAFKA_CONFLUENT_METRICS_REPORTER_SECURITY_PROTOCOL: PLAINTEXT
      KAFKA_CONFLUENT_METRICS_REPORTER_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: ""
    depends_on:
      - zoo1
      - zoo2
      - zoo3
    networks:
      - docker_default

  kafka2:
    image: confluentinc/cp-kafka:7.3.2
    hostname: kafka2
    container_name: kafka2
    ports:
      - "9093:9093"
      - "29093:29093"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka2:19093,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9093,DOCKER://host.docker.internal:29093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181,zoo2:2182,zoo3:2183"
      KAFKA_BROKER_ID: 2
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
      KAFKA_CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: "kafka1:19092,kafka2:19093,kafka3:19094"
      KAFKA_CONFLUENT_METRICS_REPORTER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TOPIC__CONFLUENT_COMMAND__MIN_INSYNC_REPLICAS: 1
      KAFKA_CONFLUENT_METRICS_REPORTER_SECURITY_PROTOCOL: PLAINTEXT
      KAFKA_CONFLUENT_METRICS_REPORTER_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: ""
    depends_on:
      - zoo1
      - zoo2
      - zoo3
    networks:
      - docker_default
  
  kafka3:
    image: confluentinc/cp-kafka:7.3.2
    hostname: kafka3
    container_name: kafka3
    ports:
      - "9094:9094"
      - "29094:29094"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka3:19094,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9094,DOCKER://host.docker.internal:29094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181,zoo2:2182,zoo3:2183"
      KAFKA_BROKER_ID: 3
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
      KAFKA_CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: "kafka1:19092,kafka2:19093,kafka3:19094"
      KAFKA_CONFLUENT_METRICS_REPORTER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TOPIC__CONFLUENT_COMMAND__MIN_INSYNC_REPLICAS: 1 
      KAFKA_CONFLUENT_METRICS_REPORTER_SECURITY_PROTOCOL: PLAINTEXT
      KAFKA_CONFLUENT_METRICS_REPORTER_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: ""
    depends_on:
      - zoo1
      - zoo2
      - zoo3
    networks:
      - docker_default

  init-kafka:
    image: confluentinc/cp-kafka:7.3.2
    depends_on:
      - kafka1
      - kafka2 
      - kafka3
    entrypoint: ['/bin/sh', '-c']
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka1:19092 --list

      echo -e 'Creating kafka topics for Broker Kafka1'
      kafka-topics --bootstrap-server kafka1:19092 --create --if-not-exists --topic rtppmdata.nationalpage.nationalppm --replication-factor 2 --partitions 2 --config retention.ms=1800000
      kafka-topics --bootstrap-server kafka1:19092 --create --if-not-exists --topic rtppmdata.nationalpage.sector --replication-factor 2 --partitions 2 --config retention.ms=1800000
      kafka-topics --bootstrap-server kafka1:19092 --create --if-not-exists --topic rtppmdata.nationalpage.operator --replication-factor 2 --partitions 2 --config retention.ms=1800000
      kafka-topics --bootstrap-server kafka1:19092 --create --if-not-exists --topic rtppmdata.oocpage.operator --replication-factor 2 --partitions 2 --config retention.ms=1800000

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka1:19092 --list

      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka2:19093 --list
      
      echo -e 'Creating kafka topics for Broker Kafka2'
      kafka-topics --bootstrap-server kafka2:19093 --create --if-not-exists --topic rtppmdata.focpage.nationalppm --replication-factor 2 --partitions 2 --config retention.ms=1800000
      kafka-topics --bootstrap-server kafka2:19093 --create --if-not-exists --topic rtppmdata.focpage.operator --replication-factor 2 --partitions 2 --config retention.ms=1800000
      kafka-topics --bootstrap-server kafka2:19093 --create --if-not-exists --topic rtppmdata.operatorpage.operators --replication-factor 2 --partitions 2 --config retention.ms=1800000
      kafka-topics --bootstrap-server kafka2:19093 --create --if-not-exists --topic rtppmdata.operatorpage.servicegroups --replication-factor 2 --partitions 2 --config retention.ms=1800000

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka2:19093 --list
      " 
    networks:
      - docker_default

  control-center:
    image: confluentinc/cp-enterprise-control-center:7.3.2
    hostname: control-center
    container_name: control-center
    depends_on:
      - zoo1
      - zoo2
      - zoo3 
      - kafka1
      - kafka2
      - kafka3
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: "PLAINTEXT://kafka1:19092,PLAINTEXT://kafka2:19093,PLAINTEXT://kafka3:19094"
      CONTROL_CENTER_ZOOKEEPER_CONNECT: "zoo1:2181,zoo2:2182,zoo3:2183"
      CONTROL_CENTER_REPLICATION_FACTOR: "2"
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: "2"
      CONTROL_CENTER_INTERNAL_TOPICS_REPLICATION: "2"
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: "2"
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_REPLICATION: "2"
      CONTROL_CENTER_OFFSET_STORAGE_TOPIC_PARTITIONS: "2"
      CONTROL_CENTER_OFFSET_STORAGE_TOPIC_REPLICATION: "2"
    networks:
      - docker_default